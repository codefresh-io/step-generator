// Code generated by cli-generator; DO NOT EDIT.
package cmd

import (
	handler "github.com/codefresh-io/step-generator/pkg/compose"

	"github.com/spf13/cobra"
)

var composeCmdOptions struct {
	specFile          string
	argumentsJsonFile string
	returnsJsonFile   string
	metadataFile      string
	leftDelimiter     string
	rightDelimiter    string
	directory         string
	out               string
}

var composeCmd = &cobra.Command{
	Use: "compose",

	RunE: func(cmd *cobra.Command, args []string) error {
		h := &handler.Handler{}
		return h.Handle(cnf)
	},
	Long: "Quickly generate Codefresh step-types",
	PreRun: func(cmd *cobra.Command, args []string) {
		rootCmd.PreRun(cmd, args)

		cnf.Set("specFile", composeCmdOptions.specFile)

		cnf.Set("argumentsJsonFile", composeCmdOptions.argumentsJsonFile)

		cnf.Set("returnsJsonFile", composeCmdOptions.returnsJsonFile)

		cnf.Set("metadataFile", composeCmdOptions.metadataFile)

		cnf.Set("leftDelimiter", composeCmdOptions.leftDelimiter)

		cnf.Set("rightDelimiter", composeCmdOptions.rightDelimiter)

		cnf.Set("directory", composeCmdOptions.directory)

		cnf.Set("out", composeCmdOptions.out)

	},
}

func init() {

	composeCmd.PersistentFlags().StringVar(&composeCmdOptions.specFile, "spec-file", cnf.GetString("specFile"), "Path to Codefresh template spec file")

	composeCmd.PersistentFlags().StringVar(&composeCmdOptions.argumentsJsonFile, "arguments-json-file", cnf.GetString("argumentsJsonFile"), "Path to Codefresh JSON-schema arguments file")

	composeCmd.PersistentFlags().StringVar(&composeCmdOptions.returnsJsonFile, "returns-json-file", cnf.GetString("returnsJsonFile"), "Path to Codefresh JSON-schema returns file")

	composeCmd.PersistentFlags().StringVar(&composeCmdOptions.metadataFile, "metadata-file", cnf.GetString("metadataFile"), "Path to step-type metadata.yaml file")
	cnf.SetDefault("leftDelimiter", "[[")

	composeCmd.PersistentFlags().StringVar(&composeCmdOptions.leftDelimiter, "left-delimiter", cnf.GetString("leftDelimiter"), "Left delimiter to use in spec file")
	cnf.SetDefault("rightDelimiter", "]]")

	composeCmd.PersistentFlags().StringVar(&composeCmdOptions.rightDelimiter, "right-delimiter", cnf.GetString("rightDelimiter"), "Right delimiter to use in spec file")

	composeCmd.PersistentFlags().StringVar(&composeCmdOptions.directory, "directory", cnf.GetString("directory"), "A directory where all the files lives")

	composeCmd.PersistentFlags().StringVar(&composeCmdOptions.out, "out", cnf.GetString("out"), "Name of the output file, if empty the result will be printed to stdout")
	rootCmd.AddCommand(composeCmd)
}
