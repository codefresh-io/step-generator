// Code generated by cli-generator; DO NOT EDIT.
package cmd

import (
	handler "github.com/codefresh/step-generator/pkg/generate"

	"github.com/spf13/cobra"
)

var generateCmdOptions struct {
	leftDelimiter     string
	rightDelimiter    string
	specFile          string
	argumentsJsonFile string
	returnsJsonFile   string
	descriptionFile   string
	examplesFile      string
	version           string
	official          bool
	tags              []string
	maintainer        string
	out               string
}

var generateCmd = &cobra.Command{
	Use: "generate",
	Args: func(cmd *cobra.Command, args []string) error {
		var validators []func(cmd *cobra.Command, args []string) error
		validators = append(validators, cobra.ExactArgs(1))
		for _, v := range validators {
			if err := v(cmd, args); err != nil {
				return err
			}
		}
		return nil
	},

	RunE: func(cmd *cobra.Command, args []string) error {
		h := &handler.Handler{}
		return h.Handle(cnf)
	},
	Long: "Quickly generate Codefresh step-types",
	PreRun: func(cmd *cobra.Command, args []string) {
		cnf.Set("name", args)
		rootCmd.PreRun(cmd, args)

		cnf.Set("leftDelimiter", generateCmdOptions.leftDelimiter)

		cnf.Set("rightDelimiter", generateCmdOptions.rightDelimiter)

		cnf.Set("specFile", generateCmdOptions.specFile)

		cnf.Set("argumentsJsonFile", generateCmdOptions.argumentsJsonFile)

		cnf.Set("returnsJsonFile", generateCmdOptions.returnsJsonFile)

		cnf.Set("descriptionFile", generateCmdOptions.descriptionFile)

		cnf.Set("examplesFile", generateCmdOptions.examplesFile)

		cnf.Set("version", generateCmdOptions.version)

		cnf.Set("official", generateCmdOptions.official)

		cnf.Set("tags", generateCmdOptions.tags)

		cnf.Set("maintainer", generateCmdOptions.maintainer)

		cnf.Set("out", generateCmdOptions.out)

	},
}

func init() {
	cnf.SetDefault("leftDelimiter", "[[")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.leftDelimiter, "left-delimiter", cnf.GetString("leftDelimiter"), "")
	cnf.SetDefault("rightDelimiter", "]]")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.rightDelimiter, "right-delimiter", cnf.GetString("rightDelimiter"), "")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.specFile, "spec-file", cnf.GetString("specFile"), "")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.argumentsJsonFile, "arguments-json-file", cnf.GetString("argumentsJsonFile"), "")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.returnsJsonFile, "returns-json-file", cnf.GetString("returnsJsonFile"), "")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.descriptionFile, "description-file", cnf.GetString("descriptionFile"), "")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.examplesFile, "examples-file", cnf.GetString("examplesFile"), "")
	cnf.SetDefault("version", "0.1.0")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.version, "version", cnf.GetString("version"), "")

	generateCmd.PersistentFlags().BoolVar(&generateCmdOptions.official, "official", cnf.GetBool("official"), "")

	generateCmd.PersistentFlags().StringArrayVar(&generateCmdOptions.tags, "tags", cnf.GetStringSlice("tags"), "")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.maintainer, "maintainer", cnf.GetString("maintainer"), "")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.out, "out", cnf.GetString("out"), "")
	rootCmd.AddCommand(generateCmd)
}
