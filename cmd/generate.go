// Code generated by cli-generator; DO NOT EDIT.
package cmd

import (
	handler "github.com/codefresh-io/step-generator/pkg/generate"

	"github.com/spf13/cobra"
)

var generateCmdOptions struct {
	outDir          string
	leftDelimiter   string
	rightDelimiter  string
	official        bool
	tags            []string
	maintainerName  string
	maintainerEmail string
	account         string
	isPublic        bool
}

var generateCmd = &cobra.Command{
	Use: "generate",
	Args: func(cmd *cobra.Command, args []string) error {
		var validators []func(cmd *cobra.Command, args []string) error
		validators = append(validators, cobra.ExactArgs(1))
		for _, v := range validators {
			if err := v(cmd, args); err != nil {
				return err
			}
		}
		return nil
	},

	RunE: func(cmd *cobra.Command, args []string) error {
		h := &handler.Handler{}
		return h.Handle(cnf)
	},
	Long: "Quickly generate Codefresh step-types",
	PreRun: func(cmd *cobra.Command, args []string) {
		cnf.Set("name", args)
		rootCmd.PreRun(cmd, args)

		cnf.Set("outDir", generateCmdOptions.outDir)

		cnf.Set("leftDelimiter", generateCmdOptions.leftDelimiter)

		cnf.Set("rightDelimiter", generateCmdOptions.rightDelimiter)

		cnf.Set("official", generateCmdOptions.official)

		cnf.Set("tags", generateCmdOptions.tags)

		cnf.Set("maintainerName", generateCmdOptions.maintainerName)

		cnf.Set("maintainerEmail", generateCmdOptions.maintainerEmail)

		cnf.Set("account", generateCmdOptions.account)

		cnf.Set("isPublic", generateCmdOptions.isPublic)

	},
}

func init() {
	cnf.SetDefault("outDir", "step")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.outDir, "out-dir", cnf.GetString("outDir"), "")
	cnf.SetDefault("leftDelimiter", "[[")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.leftDelimiter, "left-delimiter", cnf.GetString("leftDelimiter"), "Left delimiter to use in spec file")
	cnf.SetDefault("rightDelimiter", "]]")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.rightDelimiter, "right-delimiter", cnf.GetString("rightDelimiter"), "Right delimiter to use in spec file")

	generateCmd.PersistentFlags().BoolVar(&generateCmdOptions.official, "official", cnf.GetBool("official"), "Set if the step-type if an official one")

	generateCmd.PersistentFlags().StringArrayVar(&generateCmdOptions.tags, "tags", cnf.GetStringSlice("tags"), "")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.maintainerName, "maintainer-name", cnf.GetString("maintainerName"), "")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.maintainerEmail, "maintainer-email", cnf.GetString("maintainerEmail"), "")

	generateCmd.PersistentFlags().StringVar(&generateCmdOptions.account, "account", cnf.GetString("account"), "Name of the account that the step-type is maintained by")

	generateCmd.PersistentFlags().BoolVar(&generateCmdOptions.isPublic, "is-public", cnf.GetBool("isPublic"), "Set to mark step-type as public and accesiable by other accounts as well")
	rootCmd.AddCommand(generateCmd)
}
